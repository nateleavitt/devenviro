#! /bin/bash
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color
YELLOW='\033[0;93m'



function die() {
  printf "\n${RED}${@}${NC}\n"
  exit 1
}

function donemsg() {
  sleep 2
  printf "${GREEN}DONE!${NC}\n"
  sleep 1
}

function update_apt() {
  printf "updating apt\n"
  sleep 1
  sudo apt update
  donemsg 
}

function install_prereqs() {
  printf "installing prereqs..."
  {
    # Required for rbenv and ruby
    sudo apt -y install autoconf bison build-essential libssl-dev libyaml-dev libreadline6-dev zlib1g-dev libncurses5-dev libffi-dev libgdbm5 libgdbm-dev
    # Required for vscode
    sudo apt -y install software-properties apt-transport-https
    # Required for docker
    sudo apt -y install ca-certificates gnupg-agent software-properties-common

    # Required for capslock to esc key
    # https://askubuntu.com/questions/1059663/remapping-caps-lock-to-escape-in-ubuntu-18-04-bionic
    sudo apt -y install gnome-tweak-tool
    # Gnome Tweaks -> Keyboard & Mouse -> Additional Layout Options -> Caps Lock key behavior.

    sudo apt -y install wget
    sudo apt -y install vim
    sudo apt -y install ack
    sudo apt -y install gdebi
  } &> /dev/null
  donemsg
}

function install_zsh() {
  printf "installing oh-my-zsh..."
  {
    sudo apt -y install zsh
    git clone https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh
  } &> /dev/null
  donemsg
}

function install_ruby() {
  printf "installing rbenv..."
  {
    git clone https://github.com/rbenv/rbenv.git ~/.rbenv
    echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> ~/.zshrc
    echo 'eval "$(rbenv init -)"' >> ~/.zshrc
    git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
  } &> /dev/null
  donemsg
}

function install_node() {
  printf "installing node and yarn..."
  {
    sudo apt -y install node
    sudo apt -y install npm
    sudo apt -y install yarn
  } &> /dev/null
  donemsg
}

function install_vscode() {
  printf "installing vscode..."
  {
    wget -q https://packages.microsoft.com/keys/microsoft.asc -O- | sudo apt-key add -
    sudo add-apt-repository "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main"
    sudo apt -y install code
  } &> /dev/null
  donemsg
}

function install_docker() {
  printf "installing docker..."
  {
    sudo apt -y remove docker docker-engine docker.io containerd runc
    wget -q https://download.docker.com/linux/ubuntu/gpg -O- | sudo apt-key add -
    sudo apt-key fingerprint 0EBFCD88
    sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
    sudo apt -y update
    sudo apt -y install docker-ce docker-ce-cli containerd.io
    # setup users
    sudo groupadd docker
    sudo usermod -aG docker $USER
    # setup to run on startup
    sudo systemctl enable docker
    # Installing docker compose
    sudo wget -q https://github.com/docker/compose/releases/download/1.24.0-rc1/docker-compose-`uname -s`-`uname -m` -O /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
  } &> /dev/null
  donemsg
}

function install_other() {
  printf "installing other typora..."
  {
    # Install typora
    wget -qO - https://typora.io/linux/public-key.asc | sudo apt-key add -
    sudo app-apt-repository 'deb https://typora.io/linux ./'
    sudo apt -y update
    sudo apt -y install typora
  } &> /dev/null
  donemsg

  printf "installing other google chrome..."
  {
    # Install google-chrome
    wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
    sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
    sudo apt -y update
    sudo apt -y install google-chrome-stable
  } &> /dev/null
  donemsg

  printf "installing other postgresql..."
  {
    # Install postgres
    sudo apt -y install postgresql postgresql-contrib
  } &> /dev/null
  donemsg
}

function create_env() {
  # setup dev env
  printf "Creating code directories..."
  sleep 2
  {
    mkdir -p $HOME/Code
    mkdir -p $HOME/Code/github.com
    mkdir -p $HOME/Code/github.com/nateleavitt
    mkdir -p $HOME/Code/github.com/loyalstream
    mkdir -p $HOME/.config/Code/User
  } &> /dev/null
  donemsg
}

function move_files() {
  # move dotfiles
  printf "moving dotfiles to hidden..."
  mv $HOME/dotfiles ~/.dotfiles &> /dev/null
  donemsg
  printf "renaming old dirs to *.old if exist..."
  sleep 1
  {
    for i in $HOME/.vim \
      $HOME/.vimrc \
      $HOME/.gvimrc \
      $HOME/.gvimrc.before \
      $HOME/.gvimrc.after \
      $HOME/.vimrc.before \
      $HOME/.vimrc.after \
      $HOME/.gitignore_global \
      $HOME/.zshrc \
      $HOME/.config/Code/User/settings.json; do
      if [[ ( -e $i ) || ( -h $i ) ]]; then
        echo "${i} has been renamed to ${i}.old"
        mv "${i}" "${i}.old" || die "Could not move ${i} to ${i}.old"
      fi
    done
  } &> /dev/null
  donemsg
}

function config_files() {
  # Remove and replace .vimrc.before after files
  printf "setting up configuration files..."
  sleep 1
  {
    ln -s $HOME/.dotfiles/vim $HOME/.vim
    ln -s $HOME/.dotfiles/vim/vimrc $HOME/.vimrc
    ln -s $HOME/.dotfiles/vim/gvimrc $HOME/.gvimrc
    ln -s $HOME/.dotfiles/vim/gvimrc.before $HOME/.gvimrc.before
    ln -s $HOME/.dotfiles/vim/gvimrc.after $HOME/.gvimrc.after
    ln -s $HOME/.dotfiles/vim/vimrc.before $HOME/.vimrc.before
    ln -s $HOME/.dotfiles/vim/vimrc.after $HOME/.vimrc.after
    ln -s $HOME/.dotfiles/git/gitignore_global $HOME/.gitignore_global
    ln -s $HOME/.dotfiles/zsh/zshrc $HOME/.zshrc
    ln -s $HOME/.dotfiles/zsh/custom/aliases.zsh $HOME/.oh-my-zsh/custom/aliases.zsh
    ln -s $HOME/.dotfiles/zsh/custom/completions.zsh $HOME/.oh-my-zsh/custom/completions.zsh
    ln -s $HOME/.dotfiles/zsh/custom/exports.zsh $HOME/.oh-my-zsh/custom/exports.zsh
    ln -s $HOME/.dotfiles/vscode/settings.json $HOME/.config/Code/User/settings.json
  } &> /dev/null
  donemsg
}

function config_git() {
  printf  "Configuring global git ignore..."
  sleep 1
  git config --global core.excludesfile ~/.gitignore_global &> /dev/null
  donemsg
}

function install_vim_plugins() {
  printf "downloading and configuring vim plugins..."
  sleep 1
  git clone https://github.com/gmarik/Vundle.vim.git $HOME/.vim/bundle/Vundle.vim &> /dev/null
  vim +PluginInstall +qall
  donemsg
}

function remove_packages() {
  printf "cleaning up and removing old packages..."
  sleep 1
  sudo apt -y autoremove &> /dev/null
  donemsg
}

# INSTALL
printf "\n"
printf "*******************************************************\n"
printf "${GREEN}Welcome to nateleavitt's Linux setup script${NC}\n"
printf "*******************************************************\n"
sudo apt -y update &> /dev/null
install_prereqs
install_zsh
config_files
install_node
install_vscode
install_docker
install_other
create_env
move_files
install_ruby
config_git
install_vim_plugins
remove_packages
sleep 2
printf "*******************************************************\n"
printf "${GREEN}Everything is now setup!${NC}\n"
# might want to output: https://github.com/Microsoft/vscode/issues/23991
sleep 1
printf "\n"
printf "Let me know if you have any questions:\n"
printf "https://github.com/nateleavitt/dotfiles\n"
printf "${GREEN}Thank you!${NC}\n"
printf "*******************************************************\n"
printf "\n"

